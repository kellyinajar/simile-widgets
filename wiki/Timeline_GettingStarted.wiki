= Getting Started = 

Here are a few easy steps to create a simple timeline. Open up your favorite text or HTML editor and start creating an HTML file.

=== Step 1. Link to the API ===

In your HTML code, link to Timeline's Javascript API code as follows:

{{{
 <html>
   <head>
     ...
     <span style="background:#FFFFE0"><script src="http://simile.mit.edu/timeline/api/timeline-api.js" type="text/javascript"></script></span>
     ...
   </head>
   <body>
     ...
   </body>
 </html>
}}}

=== Step 2. Create a DIV Element ===

Create a <tt>div</tt> element in your HTML code, e.g.

 <nowiki><div id="my-timeline" style="height: 150px; border: 1px solid #aaa"></div> </nowiki>

You should give it an ID as well as fix its height. You can optionally set its borders, this usually makes the timeline look better.

=== Step 3. Call <tt>Timeline.create()</tt> ===

Add two event handlers, <tt>onload</tt> and <tt>onresize</tt>, to the <tt>body</tt> element:

{{{
  <body onload="onLoad();" onresize="onResize();">
    ...
  </body>
}}}

Then write the following code in a <tt>script</tt> block or a separate Javascript file:

{{{
 var tl;
 function onLoad() {
   var bandInfos = [
     Timeline.createBandInfo({
         width:          "70%", 
         intervalUnit:   Timeline.DateTime.MONTH, 
         intervalPixels: 100
     }),
     Timeline.createBandInfo({
         width:          "30%", 
         intervalUnit:   Timeline.DateTime.YEAR, 
         intervalPixels: 200
     })
   ];
   tl = Timeline.create(document.getElementById("my-timeline"), bandInfos);
 }

 var resizeTimerID = null;
 function onResize() {
     if (resizeTimerID == null) {
         resizeTimerID = window.setTimeout(function() {
             resizeTimerID = null;
             tl.layout();
         }, 500);
     }
 }
}}}

Note that we put the code to construct the timeline in the <tt>onload</tt> handler to ensure that when we start to use Timeline's API, all its code has been loaded. That code creates a horizontal timeline (below) with 2 bands: in the top band, a month spans 100 pixels (approximately, since a month here refers to 30 days while not every month is exactly 30 days long); and in the bottom band, a year spans 200 pixels. The top band takes up 70% of the timeline's height, and the bottom band 30%. '''Note that the two bands scroll independently.'''

http://simile.mit.edu/mediawiki/images/2/2c/Timeline-howto-image1.jpg

To make the two bands scroll in synchrony, and then to make the bottom band highlights the visible time span of the top band, add the following code (highlighted):

{{{
 function onLoad() {
   var bandInfos = [
     Timeline.createBandInfo({
         width:          "70%", 
         intervalUnit:   Timeline.DateTime.MONTH, 
         intervalPixels: 100
     }),
     Timeline.createBandInfo({
         width:          "30%", 
         intervalUnit:   Timeline.DateTime.YEAR, 
         intervalPixels: 200
     })
   ];
   <span style="background:#FFFFE0">bandInfos[1].syncWith = 0;</span>
   <span style="background:#FFFFE0">bandInfos[1].highlight = true;</span>
   
   tl = Timeline.create(document.getElementById("my-timeline"), bandInfos);
 }
}}}

If you try to pan one band, the other is scrolled as well.

http://simile.mit.edu/mediawiki/images/a/ad/Timeline-howto-image2.jpg

=== Step 4. Add Events ===

To add events to the timeline, create an [Timeline_EventSourceClass event source] and load it with data from an XML file:

{{{
 function onLoad() {
   <span style="background:#FFFFE0">var eventSource = new Timeline.DefaultEventSource();</span>
   var bandInfos = [
     Timeline.createBandInfo({
         <span style="background:#FFFFE0">eventSource:    eventSource,</span>
         <span style="background:#FFFFE0">date:           "Jun 28 2006 00:00:00 GMT",</span>
         width:          "70%", 
         intervalUnit:   Timeline.DateTime.MONTH, 
         intervalPixels: 100
     }),
     Timeline.createBandInfo({
         <span style="background:#FFFFE0">eventSource:    eventSource,</span>
         <span style="background:#FFFFE0">date:           "Jun 28 2006 00:00:00 GMT",</span>
         width:          "30%", 
         intervalUnit:   Timeline.DateTime.YEAR, 
         intervalPixels: 200
     })
   ];
   bandInfos[1].syncWith = 0;
   bandInfos[1].highlight = true;
   
   tl = Timeline.create(document.getElementById("my-timeline"), bandInfos);
   <span style="background:#FFFFE0">Timeline.loadXML("example1.xml", function(xml, url) { eventSource.loadXML(xml, url); });</span>
 }
}}}

The date field parm was added to make sure the timeline starts out showing the events immediately without requiring the user to pan first.  If you do not provide a date parm, the default is _now_.  Here is the resulting timeline with 3 events:

http://simile.mit.edu/mediawiki/images/c/cf/Timeline-howto-image3.jpg

Take a look at [Timeline_Example_XML1 example1.xml]. There are 3 types of events: 
 # a duration
 # an instantaneous event with an imprecise starting time
 # an instantaneous event with a precise starting time

Click on the events to see how their bubbles are rendered based on the data in the XML file. For the exact format of such XML files, refer to the documentation on [Timeline_EventSourceClass event sources]. '''Note that loading XML files is only one way in which you can add events to timelines.'''

== Differentiating the Two Bands ==

Looking at the previous timeline, it is obvious that the lower band looks denser, and it will become a lot denser a lot quicker than the upper band should we add more events. Usually, a lower band usually acts as a zoomed-out overview for an upper band and it does not have to show as much detail as the upper band. We can turn off the rendering of text as well as condense the event markings vertically:

{{{
 function onLoad() {
   var eventSource = new Timeline.DefaultEventSource();
   var bandInfos = [
     Timeline.createBandInfo({
         eventSource:    eventSource,
         date:           "Jun 28 2006 00:00:00 GMT",
         width:          "70%", 
         intervalUnit:   Timeline.DateTime.MONTH, 
         intervalPixels: 100
     }),
     Timeline.createBandInfo({
         <span style="background:#FFFFE0">showEventText:  false,</span>
         <span style="background:#FFFFE0">trackHeight:    0.5,</span>
         <span style="background:#FFFFE0">trackGap:       0.2,</span>
         eventSource:    eventSource,
         date:           "Jun 28 2006 00:00:00 GMT",
         width:          "30%", 
         intervalUnit:   Timeline.DateTime.YEAR, 
         intervalPixels: 200
     })
   ];
   bandInfos[1].syncWith = 0;
   bandInfos[1].highlight = true;
   
   tl = Timeline.create(document.getElementById("my-timeline"), bandInfos);
   Timeline.loadXML("example1.xml", function(xml, url) { eventSource.loadXML(xml, url); });
 }
}}}

The lower band of the timeline below does not show text and its event markers are also smaller. But note that the third event is vertically aligned with the first event in the lower band, but it is on its own track in the upper band. We will address this problem later.

http://simile.mit.edu/mediawiki/images/3/3a/Timeline-howto-image4.jpg

== Understanding Initialization Settings ==

By now you must have realized that <tt>Timeline.createBandInfo()</tt> fills in default settings, which can be overridden, for constructing a band in a timeline. What <tt>Timeline.createBandInfo()</tt> does is something like this (in pseudo-code):

{{{
 Timeline.createBandInfo = function(params) {
   return {
     width:          params.width,
     eventSource:    params.eventSource '''(or null by default),'''
     timeZone:       params.timeZone '''(or 0 by default),'''
     ether:          new Timeline.LinearEther({
                       interval:          '''the number of milliseconds in <span style="background:#FFFFE0">params.intervalUnit</span>,'''
                       pixelsPerInterval: params.intervalPixels,
                       centersOn:         params.date '''(or the current date by default)'''
                     }),
     etherPainter:   new Timeline.GregorianEtherPainter({
                       unit:              <span style="background:#FFFFE0">params.intervalUnit</span>,
                       theme:             params.theme '''(or the default theme)'''
                     }),
     eventPainter:   new Timeline.DurationEventPainter({
                       showText:          params.showEventText '''(or true by default)''',
                       theme:             '''the same theme above''',
                       trackHeight:       params.trackHeight '''(or the default track height in the theme)''',
                       trackGap:          params.trackHeight '''(or the default track gap in the theme)''',
                       layout:            new Timeline.StaticTrackBasedLayout({
                                            eventSource: '''the same eventSource above''',
                                            ether:       '''the same ether above''',
                                            showText:    '''the same showText value above''',
                                            theme:       '''the same theme above'''
                                          })
                     })
   }
 };
}}}

In other words, <tt>Timeline.createBandInfo()</tt> takes an object whose fields store initialization settings and returns yet another object whose fields stores initialization settings that <tt>Timeline.create()</tt> can understand. <tt>Timeline.createBandInfo()</tt> does the work of routing each initialization setting that you give it to the appropriate place(s). For example, <span style="background:#FFFFE0"><tt>params.intervalUnit</tt></span> is used referenced twice above, once to construct an [[ether]] and once to construct an [[ether painter]]. Whatever default setting that <tt>Timeline.createBandInfo()</tt> doesn't provide is provided by the [Timeline_ThemeClass theme].

The [Timeline_EtherClass ether] of a band dictates how time is mapped onto the pixel space: how many pixels a time span takes up. The [Timeline_EtherPainterClass ether painter] makes this mapping visible to the user by painting various markings on the background of the band, e.g., "Jun", "Jul", "2005", "2006". The [Timeline_EventPainterClass event painter], obviously, paints the events that are fed to it by the [Timeline_EtherSourceClass ether source]. The <tt>Timeline.DurationEventPainter</tt> uses a [Timeline_LayoutClass layout] to determine how to distribute the events among several [Timeline_Tracks tracks]] such that events don't overlap one another.

The object returned by <tt>Timeline.createBandInfo()</tt> can be fixed before we feed it into <tt>Timeline.create()</tt>. We have already done that to sync the two bands. This time, we will take the layout from the upper band and set it into the lower band so that the event is positioned on the same track in both bands:

{{{
 function onLoad() {
   var eventSource = new Timeline.DefaultEventSource();
   var bandInfos = [
     Timeline.createBandInfo({
         eventSource:    eventSource,
         date:           "Jun 28 2006 00:00:00 GMT",
         width:          "70%", 
         intervalUnit:   Timeline.DateTime.MONTH, 
         intervalPixels: 100
     }),
     Timeline.createBandInfo({
         eventSource:    eventSource,
         date:           "Jun 28 2006 00:00:00 GMT",
         width:          "30%", 
         intervalUnit:   Timeline.DateTime.YEAR, 
         intervalPixels: 200
     })
   ];
   bandInfos[1].syncWith = 0;
   bandInfos[1].highlight = true;
   <span style="background:#FFFFE0">bandInfos[1].eventPainter.setLayout(bandInfos[0].eventPainter.getLayout());</span>
   
   tl = Timeline.create(document.getElementById("my-timeline"), bandInfos);
   Timeline.loadXML("example1.xml", function(xml, url) { eventSource.loadXML(xml, url); });
 }
}}}

Now note that the last event is on its own track in the lower band (just like in the upper band) although it can stay on the same track as the first even in the lower band without resulting in any overlap.

http://simile.mit.edu/mediawiki/images/e/e4/Timeline-howto-image5.jpg

== Hot Zones ==

Now we load [Timeline_Example_XML2 example2.xml], which contains a few more details for "Trip to Beijing" and discover that the days starting on August 2, 2006, are quite cramped:

http://simile.mit.edu/mediawiki/images/6/6d/Timeline-howto-image6.jpg

To solve this problem, we will '''distort''' the time of those days, producing the effect of zooming in. Because we want time to flow differently than before—we want time spans to be mapped to pixels in a different way, we need a different kind of ether (and a different kind of ether painter to go with it):

{{{
 function onLoad() {
   var eventSource = new Timeline.DefaultEventSource();
   var bandInfos = [
     Timeline.<span style="background:#FFFFE0">createHotZoneBandInfo({
         zones: [
             {   start:    "Aug 01 2006 00:00:00 GMT-0500",
                 end:      "Sep 01 2006 00:00:00 GMT-0500",
                 magnify:  10,
                 unit:     Timeline.DateTime.WEEK
             },
             {   start:    "Aug 02 2006 00:00:00 GMT-0500",
                 end:      "Aug 04 2006 00:00:00 GMT-0500",
                 magnify:  7,
                 unit:     Timeline.DateTime.DAY
             },
             {   start:    "Aug 02 2006 06:00:00 GMT-0500",
                 end:      "Aug 02 2006 12:00:00 GMT-0500",
                 magnify:  5,
                 unit:     Timeline.DateTime.HOUR
             }
         ],
         timeZone:       -5</span>,
         eventSource:    eventSource,
         date:           "Jun 28 2006 00:00:00 GMT",
         width:          "70%", 
         intervalUnit:   Timeline.DateTime.MONTH, 
         intervalPixels: 100
     }),
     Timeline.createBandInfo({
         timeZone:       -5,
         eventSource:    eventSource,
         date:           "Jun 28 2006 00:00:00 GMT",
         width:          "30%", 
         intervalUnit:   Timeline.DateTime.YEAR, 
         intervalPixels: 200
     })
   ];
   bandInfos[1].syncWith = 0;
   bandInfos[1].highlight = true;
   bandInfos[1].eventPainter.setLayout(bandInfos[0].eventPainter.getLayout());
   
   tl = Timeline.create(document.getElementById("my-timeline"), bandInfos);
   Timeline.loadXML("example1.xml", function(xml, url) { eventSource.loadXML(xml, url); });
 }
}}}

In the resulting timeline below, the whole month of August 2006 is stretched out 10 times, showing weekly intervals; the two days of August 2nd and August 3rd are stretched out another 7 times; and then the time between 6am to noon on August 2nd is stretched out another 5 times, showing hourly intervals. All this stretching is done to the upper band only, so if you pan the upper band, observe how the lower band's highlight grows and shrinks.

http://simile.mit.edu/mediawiki/images/8/8c/Timeline-howto-image7.jpg

Of course, panning the lower band over the hot zones of the upper band now makes the upper band a little jumpy. We can distort the lower band to reduce this effect:

{{{
 function onLoad() {
   var eventSource = new Timeline.DefaultEventSource();
   var bandInfos = [
     Timeline.createHotZoneBandInfo({
         zones: [
             {   start:    "Aug 01 2006 00:00:00 GMT-0500",
                 end:      "Sep 01 2006 00:00:00 GMT-0500",
                 magnify:  10,
                 unit:     Timeline.DateTime.WEEK
             },
             {   start:    "Aug 02 2006 00:00:00 GMT-0500",
                 end:      "Aug 04 2006 00:00:00 GMT-0500",
                 magnify:  7,
                 unit:     Timeline.DateTime.DAY
             },
             {   start:    "Aug 02 2006 06:00:00 GMT-0500",
                 end:      "Aug 02 2006 12:00:00 GMT-0500",
                 magnify:  5,
                 unit:     Timeline.DateTime.HOUR
             }
         ],
         timeZone:       -5,
         eventSource:    eventSource,
         date:           "Jun 28 2006 00:00:00 GMT",
         width:          "70%", 
         intervalUnit:   Timeline.DateTime.MONTH, 
         intervalPixels: 100
     }),
     Timeline.<span style="background:#FFFFE0">createHotZoneBandInfo({
         zones: [
             {   start:    "Aug 01 2006 00:00:00 GMT-0500",
                 end:      "Sep 01 2006 00:00:00 GMT-0500",
                 magnify:  20,
                 unit:     Timeline.DateTime.WEEK
             }
         ],</span>
         timeZone:       -5,
         eventSource:    eventSource,
         date:           "Jun 28 2006 00:00:00 GMT",
         width:          "30%", 
         intervalUnit:   Timeline.DateTime.YEAR, 
         intervalPixels: 200
     })
   ];
   bandInfos[1].syncWith = 0;
   bandInfos[1].highlight = true;
   bandInfos[1].eventPainter.setLayout(bandInfos[0].eventPainter.getLayout());
   
   tl = Timeline.create(document.getElementById("my-timeline"), bandInfos);
   Timeline.loadXML("example1.xml", function(xml, url) { eventSource.loadXML(xml, url); });
 }

}}}

The resulting timeline below still needs a few more iteration to make it smooth. But I hope this has been a good starting point for you.

http://simile.mit.edu/mediawiki/images/1/10/Timeline-howto-image8.jpg
